AMAP: Each map has 4 encounter offsets (grass, water, tree, fishing)
    in that location there is a word that contains the encounter_rate
Following the word there is an offset (word) that points to a list.
        Each element of the list contains:
minlevel (byte)
maxlevel (byte)
species (hword)
The length of the list varies according to the type of list:
            grass: 12 entry
            fishing: 10 entry
            water/tree: 5 entry

So in total we need to prepare for 12+10+5*2=32 entries
each square is 32x32 (with spacing)
They don't fit all together on one screen
Even eliminating tree the space is tight

"Card" system, which shows 

I'm looking for an encounter table
at 08082D1E (in the middle of checks for encounters in tall grass) does

ROM:08082D1E                 LDR     R1, =wild_pokemon_data
ROM:08082D20                 ADDS    R0, R5, R4
ROM:08082D22                 LSLS    R0, R0, #2
ROM:08082D24                 ADDS    R1, #wild_pokemon_distribution.grass
ROM:08082D26                 ADDS    R4, R0, R1
ROM:08082D28                 LDR     R0, [R4]

y clear that in r5 and r4 there are references to the current pokemon

to generate random pokemon, do
ROM:08082D64 BL wild_pokemon_for_domain @ r0=grass of this wild_encounter
ROM:08082D64                                         @ r1=0?
ROM:08082D64                                         @ r2=1?

where r0 is the one calculated at 08082D28.
use r1=0 to indicate that he wants grass encounters
then call wild_pokemon_rand_grass to roll the die and have an index.
Gets to 08082B20




at 083D37A0 there is the table with the icons (extern const u8 pokeicon_table[410]
[POKEAGB_POKEMON_ICON_SIZE];)

08D2FE78 palc_normal_bulbasaur
refereced by
0823730C palc_table_normal


from dexnav I steal


    // check which palette the species icon uses
    u8 icon_pal = pokeicon_pal_indices[species];
    struct SpritePalette bulbpal = {(u8*)&(pokeicon_pals[icon_pal]), 0x3139};
    gpu_pal_obj_alloc_tag_and_apply(&bulbpal);

    u32 pid = rand_range(0, 0xFFFF) | rand_range(0, 0xFFFF) << 16;
    void *icon_gfx = load_party_icon_tiles_with_form(species, pid, false);
    struct SpriteTiles bulbicon = {icon_gfx, 4 * 8 * 32, 0x3139};
    gpu_tile_obj_alloc_tag_and_upload(&bulbicon);

    // create object
    u8 obj_id = template_instanciate_forward_search(&bulbtemp, ICONX, ICONY, 0x0);
    *objid = obj_id;
    //dprintf("address is: %x\n", objects[obj_id].image);
    dprintf("address is: %x\n", &picon_oam);
    objects[obj_id].final_oam.affine_mode = 2;
    objects[obj_id].final_oam.obj_mode = 1;
